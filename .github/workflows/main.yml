name: Build VCV Rack Plugins

permissions:
  contents: write

on:
  push:
    paths-ignore:
      - 'README*'
      - 'doc/**'
      - 'design/**'
      - 'dev/**'
  pull_request:

env:
  rack-sdk-version: latest
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

jobs:
  modify-plugin-version:
    name: Modify plugin versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          for plugin in ComparatorStepper EnvelopeArray PentaSequencer WavePropagation; do
            cd $plugin
            gitrev=$(git rev-parse --short HEAD)
            pluginversion=$(jq -r '.version' plugin.json)
            echo "Set plugin version from $pluginversion to $pluginversion-$gitrev in $plugin"
            jq --arg VERSION "$pluginversion-$gitrev" '.version=$VERSION' plugin.json > temp.json && mv temp.json plugin.json
            cd ..
          done
        if: "! startsWith(github.ref, 'refs/tags/v')"

  build:
    name: Build ${{ matrix.plugin }} - ${{ matrix.platform }}
    needs: modify-plugin-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [win-x64, lin-x64]
        plugin: [ComparatorStepper, EnvelopeArray, PentaSequencer, WavePropagation]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build plugin
        run: |
          cd ${{ matrix.plugin }}
          # Insert your build commands here
          # Example: make clean && make
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/${{ matrix.plugin }}/build
          name: ${{ matrix.plugin }}-${{ matrix.platform }}
          overwrite: true

  build-mac:
    name: Build ${{ matrix.plugin }} - mac-${{ matrix.platform }}
    needs: modify-plugin-version
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [x64, arm64]
        plugin: [ComparatorStepper, EnvelopeArray, PentaSequencer, WavePropagation]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Build plugin for Mac
        run: |
          cd ${{ matrix.plugin }}
          # Insert Mac-specific build commands here
          # Example for using Rack SDK:
          # wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.platform }}.zip
          # unzip Rack-SDK.zip -d Rack-SDK
          # export RACK_DIR=$PWD/Rack-SDK
          # make clean && make
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/${{ matrix.plugin }}/dist
          name: ${{ matrix.plugin }}-mac-${{ matrix.platform }}
          overwrite: true

# The publish and publish-nightly jobs remain unchanged from your original workflow.


  publish:
    name: Publish plugin
    # only create a release if a tag was created that is called e.g. v1.2.3
    # see also https://vcvrack.com/manual/Manifest#version
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:  [build, build-mac]
    steps:
      - uses: actions/checkout@v4
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Check if plugin version matches tag
        run: |
          pluginversion=`jq -r '.version' plugin.json`
          if [ "v$pluginversion" != "${{ env.CI_REF_NAME }}" ]; then
            echo "Plugin version from plugin.json 'v$pluginversion' doesn't match with tag version '${{ env.CI_REF_NAME }}'"
            exit 1
          fi
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ env.CI_REF_NAME }}
          body: |
            ${{ env.CI_REPOSITORY_NAME }} VCV Rack Plugin ${{ env.CI_REF_NAME }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v3
        with:
          path: _artifacts
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _artifacts/**/*.vcvplugin
          tag: ${{ github.ref }}
          file_glob: true

  publish-nightly:
    name: Publish nightly
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [build, build-mac]
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: _artifacts
      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: Nightly # This may also be of the form 'refs/tags/staging'
          fail-if-no-assets: false
          assets: '*'
      - name: Upload release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: _artifacts/**/*.vcvplugin
          tag: Nightly
          file_glob: true
